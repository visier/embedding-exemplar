#!/usr/bin/env node

// This file was auto-generated by an Express template, with minor modifications by Visier Solutions Inc.
// It configures and launches the server.

/**
 * Module dependencies.
 */
const app = require('../app');
const { hostname, httpsPKI } = require('../config');

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(443);
const url = `${hostname}:${port}`;

/**
 * Create HTTP or HTTPS server.
 */
const server = require('https').createServer(httpsPKI, app);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
// Print message to the console and open browser to app homepage
function onListening() {
  try {
    // If "-h" provided for "headless mode", do not open browser.
    if (!process.argv.includes("-h")) {
      const route = '/' + (process.argv.find(arg => arg.startsWith('-u=')) || '')
          .replace('-u=', '');
      const open = require('open');
      open(url + route);
    }
    console.log("Server started at " + url);
  } catch {
    console.log(`Open ${url} in your browser to view the Embedding Exemplar App`);
  }
}
